extend type Mutation{
    createFormula(data: FormulaInput): Int @checkRole(permission:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])
    updateFormula(data: FormulaInput): Int @checkRole(permission:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])
    createReference(data: ReferenceInput): Int @checkRole(permission:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])

    computeFormulas(formulas: [String]): [String] @checkRole(permission:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])

    createFenrir(data: FenrirInput): Int  @checkRole(permission:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])
    createFenrirTemplate(data: FenrirInput): Int @checkRole(permission:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])
}
input FormulaInput{
    id: ID
    original_formula: String
    rpn_formula: String
    name: String!
    description: String!
    variable_data: [VariableInput]
}
input ReferenceInput{
    id: ID
    name: String
    description: String
    values: String!
}
input VariableInput{
    id: ID
    name: String
    name_key: String!
    description: String
}
input FenrirInput{
    name: String
    description: String
    models: String
}
type Reference {
    id: ID
    name: String
    description: String
    reference_values: String
}type Formula {
    id: ID
    latex_formula: String
    original_formula: String
    rpn_formula: String
    name_key: String!
    name: String!
    description: String!
    variable_data: [FormulaVariable]
}type FormulaVariable {
    description: String
    name_key: String
    name: String
    formula_id: ID
    id: ID
}

type Fenrir {
    id: ID
    name: String
    description: String
    models: String
}



