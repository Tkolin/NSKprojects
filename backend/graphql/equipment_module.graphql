extend type Mutation {
    syncEquipmentTypeParameters(
        equipmentTypeId: ID!
        parametersIds: [ID]!
    ): EquipmentType
}

extend type Mutation {
    deleteSupplier(id: ID!): Boolean
    createSupplier(data: SupplierInput!): Supplier
    updateSupplier(id: ID!, data: SupplierInput!): Supplier
}
extend type Mutation {
    deleteEquipmentTypeActivity(id: ID!): Boolean
    createEquipmentTypeActivity(
        data: EquipmentTypeActivityInput!
    ): EquipmentTypeActivity
    updateEquipmentTypeActivity(
        id: ID!
        data: EquipmentTypeActivityInput!
    ): EquipmentTypeActivity
    deleteEquipmentTypeGroup(id: ID!): Boolean
    createEquipmentTypeGroup(data: EquipmentTypeGroupInput!): EquipmentGroup
    updateEquipmentTypeGroup(
        id: ID!
        data: EquipmentTypeGroupInput!
    ): EquipmentGroup
}
input EquipmentTypeActivityInput {
    name: String
}
input EquipmentTypeGroupInput {
    name: String
}
input SupplierInput {
    name: String
}
extend type Query {
    suppliers(queryOptions: QueryOptions, queryType: String): SupplierResult

    equipmentTypeActivitys(
        queryOptions: QueryOptions
        queryType: String
    ): EquipmentTypeActivityResult

    equipmentGroups(
        queryOptions: QueryOptions
        queryType: String
    ): EquipmentGroupResult
    equipmentModels(
        queryOptions: QueryOptions
        queryType: String
    ): EquipmentModelResult
    equipmentModel(id: ID!): EquipmentModel
    equipmentTypes(
        queryOptions: QueryOptions
        queryType: String
    ): EquipmentTypeResult
    equipmentType(id: ID): EquipmentType
}
type EquipmentTypeActivity {
    id: ID
    name: String
}

type EquipmentTypeActivityResult {
    items: [EquipmentTypeActivity]
    count: Int
}

type SupplierResult {
    items: [Supplier]
    count: Int
}
type EquipmentGroupResult {
    items: [EquipmentGroup]
    count: Int
}
type EquipmentModelResult {
    items: [EquipmentModel]
    count: Int
}
type EquipmentTypeResult {
    items: [EquipmentType]
    count: Int
}
type Supplier {
    id: ID
    name: String
    contact: Contact
    email: String
    phone_number: String
    equipment_types: [EquipmentType]
}

extend type Mutation {
    createEquipmentType(data: EquipmentTypeInput!): EquipmentType
    updateEquipmentType(id: ID!, data: EquipmentTypeInput!): EquipmentType
        @update
    deleteEquipmentType(id: ID!): Boolean
}

input EquipmentTypeInput {
    name: String!
    type_activity_id: ID
    group_id: ID
}

type Mutation {
    createEquipmentModel(data: EquipmentModelInput!): EquipmentModel @create
    updateEquipmentModel(id: ID!, data: EquipmentModelInput!): EquipmentModel
        @update
    deleteEquipmentModel(id: ID!): Boolean @delete
}

input EquipmentModelInput {
    model_name: String!
    equipment_type_id: ID
    equipment_type_activity_id: ID
    supplier_id: ID
}

type Mutation {
    createEquipmentModel(data: EquipmentModelInput!): EquipmentModel @create
    updateEquipmentModel(id: ID!, data: EquipmentModelInput!): EquipmentModel
        @update
    deleteEquipmentModel(id: ID!): Boolean @delete
}

input EquipmentModelInput {
    model_name: String
    equipment_type_id: ID
    equipment_type_activity_id: ID
    supplier_id: ID
}

type Mutation {
    createEquipmentGroup(data: EquipmentGroupInput!): EquipmentGroup @create
    updateEquipmentGroup(id: ID!, data: EquipmentGroupInput!): EquipmentGroup
        @update
    deleteEquipmentGroup(id: ID!): Boolean @delete
}

input EquipmentGroupInput {
    name: String!
}

type EquipmentGroup {
    id: ID!
    name: String!
}

type EquipmentModel {
    id: ID!
    model_name: String
    equipment_type_id: ID
    equipment_type: EquipmentType
    equipment_type_activity_id: ID
    supplier_id: ID
    supplier: Supplier
    parameters: [Parameter]
    parameterValue: [ParameterValue]
}

type EquipmentType {
    id: ID!
    name: String!
    type_activity: EquipmentTypeActivity
    group: EquipmentGroup
    parameters: [Parameter]
}

type ParameterValue {
    parameter: Parameter
    value: Float
}
