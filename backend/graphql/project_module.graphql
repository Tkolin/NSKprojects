#
#   - QUERY -
#
extend type Query {
    projectIrds(projectId: ID): [ProjectIrd]
        @checkRole(permission: ["read-project-ird"])
    projectTasks(projectId: ID): [ProjectTask]
        @checkRole(permission: ["read-project-task"])
    projectStages(projectId: ID): [ProjectStage]
        @checkRole(permission: ["read-project-stage"])
    projectsStatistic(projectStatuses: [String]!): [ProjectStatistic]
        @checkRole(permission: ["read-project"])

    executorOrders(projectId: ID, executorId: ID): [ExecutorOrder!]
    fullExecutorOrders(status: String): [ExecutorOrder!]

    projectTS(projectId: ID): ProjectTS @checkRole(permission: ["math"])
}
#-INPUTS:

#-TYPES:

type ProjectTaskExecutor {
    id: ID!
    executor: Person
    project_task: ProjectTask!
    price: Float
    date_start: String
    date_end: String
}
type ProjectTS {
    project_id: Float
    ts_chapter: TSChapter
    values: [ProjectTSValue]
}
type TSChapter {
    id: ID!
    name: String
    content: String
}
type ProjectTSValue {
    id: ID!
    name: String
    value: String
}
type ProjectStatistic {
    status: ProjectStatus
    project_ids: [ID]
}
#
#   - MUTATIONS -
#
extend type Mutation {
    acceptIrd(irdId: ID!, dateAccept: String!): ProjectIrd
    receivedIrd(irdId: ID!, dateReceived: String!): ProjectIrd
    rejectIrd(irdId: ID!): ProjectIrd
    viewedIrd(irdIds: [ID]!): [ProjectIrd]
    projectTSChapterSync(projectId: ID!, chapterIds: [ID]!): Project
    setTemplateProjectStages(projectId: ID!, templateProjectId: ID!): Project
        @checkRole(permission: ["update-project-ird"])
    setTemplateProjectIrds(projectId: ID!, templateProjectId: ID!): Project
        @checkRole(permission: ["update-project-ird"])
    projectIrdsSync(items: [IrdToProjectInput]!): Project
        @checkRole(permission: ["update-project-ird"])

    upProjectStatus(projectId: ID!, date: String!): Project
        @checkRole(permission: ["update-project-ird"])
    archivingProjectStatus(projectId: ID!, date: String): Project
        @checkRole(permission: ["update-project-ird"])
    changeProjectStatus(
        projectId: ID!
        statusKey: String!
        dateStart: String
    ): Project @checkRole(permission: ["update-project-ird"])

    projectStagesSync(items: [StageToProjectInput]!): Project
        @checkRole(permission: ["update-project-stage"])
    projectTasksStructureUpdate(
        project_id: ID!
        data: [TaskToProjectStructureInput]!
    ): Project
        @checkRole(
            permission: [
                "update-project-task"
                "create-project-task"
                "delete-project-task"
            ]
        )
    projectTaskDetailUpdate(data: TaskToProjectDetailInput!): ProjectTask
        @checkRole(permission: ["update-project-task", "create-project-task"])
    updatePaymentsToProject(project: ID): Project

    changeTemplateTypeProject(
        typeProject: ID!
        newTemplate: ID!
    ): TypeProjectDocument
    generatedCommercialOfferMessage(
        projectId: ID!
        dateOffer: String!
        delegationId: ID!
    ): Url

    updateEmployeesToTasks(
        tasksIds: [ID]
        employeesIds: [ID]
        stageNumber: Int
    ): [ProjectTask] @checkRole(permission: ["update-project-task-executor"])

    projectTaskUp(taskId: ID!): ProjectTask
        @checkRole(permission: ["update-project-ird"])
}
#-INPUTS:
input TaskToProjectStructureInput {
    task_id: ID!
    local_id: String!
    local_id_inherited: String
    stage_number: Int!
}

input TaskToProjectDetailInput {
    id: ID

    description: String
    duration: Int
    offset: Int
    price: Float
    executor_id: ID
}
input IrdToProjectInput {
    project_id: ID!
    ird_id: ID!
    stage_number: Int!
    application_project: Int
    received_date: String
}
input StageToProjectInput {
    project_id: ID!
    stage_id: ID!
    number: Int!
    percent: Int!
    duration: Int!
    offset: Int
}
input RequestInput {
    name: ID!
    organization_id: ID!
    type_project: ID
    contact_id: ID!
    message: String
    number_message: String
    date_send: String!
    file_name: String
}
input TaskToProject {
    project_id: ID!
    task_id: ID

    project_task_inherited_id: ID
    price: Float
    stage_number: Int
    date_start: String
    date_end: String
}

#-RESULTS:
type CountProjectByOrganizations {
    organization_id: ID!
    count_project: Int!
}
type ProjectTasksResult {
    items: [ProjectTask]
}
