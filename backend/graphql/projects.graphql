# Мутации с основными данными
extend type Mutation{
    updateProject(
        data: ProjectInput
    ): Project! @checkRole(roles:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])
    createProject(
        data: ProjectInput
        templates: ProjectTemplatesSetting
    ): Project! @checkRole(roles:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])
    updateSectionReferenceToProject(
        items: [SectionReferencesToProject]
    ): Int @checkRole(roles:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])

    updateProjectStage(
        id: ID!
        project_id: ID!
        stage_id: ID!
        progress: String!
        date_start: String!
        duration: String!
    ): ProjectStage!
    createProjectStage(
        project_id: ID!
        stage_id: ID!
        progress: String!
        date_start: String!
        duration: String!
    ): ProjectStage! @checkRole(roles:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])

    updateIrdsToProject(
        items: [IrdToProject]
    ): [ProjectIRD] @checkRole(roles:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])
    updateStagesToProject(
        items: [StageToProject]
    ): [ProjectStage] @checkRole(roles:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])
    updateTaskToProject(
        data: [TasksToProject]!
        type: String
    ): Project @checkRole(roles:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])
    deleteTaskToProject(
        id: ID!
    ): Project @checkRole(roles:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])
    createTaskToProject(
        data: [TasksToProject]
    ): Project @checkRole(roles:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])
    createTasksToProject(
        data: [TasksToProjectExs]!
    ): Project @checkRole(roles:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])


    updatePaymentsToProject(
        project: ID
    ): Project @checkRole(roles:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])
    changeTemplateTypeProject(
        typeProject: ID!
        newTemplate: ID!
    ): TypeProjectDocument @checkRole(roles:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])
    updateEmployeesToTasks(
        tasksIds: [ID]
        employeesIds: [ID]
        stageNumber: Int
    ): [ProjectTask] @checkRole(roles:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])
    updateExecutorToTasks(
        data: [ExecutorToTask]!
    ): [Project] @checkRole(roles:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])
}

# Основная модель проекта
type Project{
    id: ID!
    number: String
    name: String
    prepayment: Int
    organization_customer: Organization
    type_project_document: TypeProjectDocument
    facilities: [Facility]
    date_signing: String
    date_create: String
    duration: Int
    date_end: String
    status: ProjectStatus
    date_completion: String
    delegations: [Contact]
    price: Int
    project_irds: [ProjectIRD]
    project_stages: [ProjectStage]
    project_tasks: [ProjectTask]
}

# Перечисления внутри основной модели
type ProjectIRD{
    id: ID!
    project: Project
    IRD: IRD
    receivedDate: String
    stageNumber: String
    applicationProject: String
}
type ProjectStage{
    id: ID!
    project: Project
    stage: Stage
    number: Int
    price: Float
    price_to_paid: Float
    percent: Int
    date_start: String
    duration: Int
    date_end: String
    progress: Int
}
type ProjectTask{
    id: ID!
    project_id: ID
    project_task_inherited_id: ID
    task: Task
    stage_number: Int
    date_start: String
    date_end: String
    duration: Int
    executor: Person
    price: Float
    description: String
}
type TaskExecutorData{
    id: ID!
    executor: Person
    date_start: String
    duration: Int
    date_end: String
    description: String
    price: Int
}
type InheritedTask{
    project_task_id: ID!
    project_inherited_task_id: ID!
}
input StageToProject {
    id: ID
    project_id: ID
    stage_id: ID
    number: Int
    price: Float
    percent: Int
    date_start: String
    duration: Int
    date_end: String
    progress: Int
    price_to_paid: Float
}
# Данные для запроса
input ProjectInput {
    id: ID
    number: String!
    name: String!
    organization_customer_id: ID!
    type_project_document_id: ID!
    date_signing: String
    duration: Int
    date_end: String
    date_create: String
    status_id: ID
    date_completion: String
    price: Int!
    prepayment: Int!
    facility_id: [ID]!
    delegates_id: [ID]
}input ProjectTemplatesSetting {
    project_id_to_stages: [ID]
    project_id_to_irds: [ID]
}input ExecutorToTask {
    project_tasks_id : ID
    executor_id : ID
    date_start : String
    duration : Int
    date_end : String
    price: Float
}

# побочные
input SectionReferencesToProject {
    projectId: ID!
    SectionReferencesId: ID
    data: String
}
input ProjectIrdInput {
    stage: ID
    persent: Int
    date_start: String
    date_end: String
    number: Int
}input ProjectStageInput {
    stage: ID
    persent: Int
    date_start: String
    date_end: String
    number: Int
}input ProjectTasksInput {
    stage: ID
    persent: Int
    date_start: String
    date_end: String
    number: Int
}
input TasksToProject {
    id: ID
    project_id: ID
    description: String
    inherited_task_ids: ID
    task_id: ID
    date_start: String
    date_end: String
    duration: Int
    price: Float
    executor_id: ID
    description: String
    stage_number: Int
}input TasksToProjectExs {
    project_id: ID!
    project_task_inherited_id: ID
    task_id: ID
    stage_number: Int
    date_start: String
    date_end: String
}
input TaskExecutor {
    id: ID
    executor_id: ID
    price: Int
}
input IrdToProject {
    id: ID
    project_id: ID
    ird_id: ID
    stageNumber: Int
    applicationProject: Int
    receivedDate: String
}

