 # Мутации с основными данными
extend type Mutation{
    updateProject(
        data: ProjectInput
    ): Project! @checkRole(roles:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])
    createProject(
        data: ProjectInput
    ): Project! @checkRole(roles:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])
    updateSectionReferenceToProject(
        items: [SectionReferencesToProject]
    ): Int @checkRole(roles:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])

    updateProjectStage(
        id: ID!
        project_id: ID!
        stage_id: ID!
        progress: String!
        date_start: String!
        duration: String!
    ): ProjectStage!
    createProjectStage(
        project_id: ID!
        stage_id: ID!
        progress: String!
        date_start: String!
        duration: String!
    ): ProjectStage! @checkRole(roles:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])

    updateIrdsToProject(
        items: [IrdToProject]
    ): [ProjectIRD] @checkRole(roles:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])
    updateStagesToProject(
        items: [StageToProject]
    ): [ProjectStage] @checkRole(roles:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])
    updateTaskToProject(
        data: TasksToProject
    ): Int @checkRole(roles:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])
    deleteTaskToProject(
        id: ID!
    ): String @checkRole(roles:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])
    createTaskToProject(
        data: TasksToProject
    ): Int @checkRole(roles:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])
    updatePaymentsToProject(
        project: ID
    ): Int @checkRole(roles:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])
}

# Основная модель проекта
type Project{
    id: ID!
    number: String
    name: String
    prepayment: Int
    organization_customer: Organization
    type_project_document: TypeProjectDocument
    facilities: [Facility]
    date_signing: String
    date_create: String
    duration: Int
    date_end: String
    status: ProjectStatus
    date_completion: String
    delegations: [Contact]
    price: Int
    project_irds: [ProjectIRD]
    project_stages: [ProjectStage]
    project_tasks: [ProjectTask]
 }

# Перечисления внутри основной модели
type ProjectIRD{
    id: ID!
    project: Project
    IRD: IRD
    receivedDate: String
    stageNumber: String
    applicationProject: String
}
type ProjectStage{
    id: ID!
    project: Project
    stage: Stage
    number: Int
    price: Float
    price_to_paid: Float
    percent: Int
    date_start: String
    duration: Int
    date_end: String
    progress: Int
}
type ProjectTask{
    id: ID!
    inherited_task_ids: [InheritedTask]
    task: Task
    date_start: String
    date_end: String
    duration: Int
    executors: [TaskExecutorData]
    price: Float
    description: String
}
type TaskExecutorData{
    id: ID!
    executor: Person
    price: Int
}
type InheritedTask{
    project_task_id: ID!
    project_inherited_task_id: ID!
}
 input StageToProject {
     id: ID
     project_id: ID
     stage_id: ID
     number: Int
     price: Float
     percent: Int
     date_start: String
     duration: Int
     date_end: String
     progress: Int
     price_to_paid: Float
 }
# Данные для запроса
input ProjectInput {
    id: ID
    number: String
    name: String
    organization_customer_id: ID
    type_project_document_id: ID
    date_signing: String
    duration: Int
    date_end: String
    date_create: String
    status_id: ID
    date_completion: String
    price: Int
    prepayment: Int
    facility_id: [ID]
    delegates_id: [ID]
}

# побочные
input SectionReferencesToProject {
    projectId: ID!
    SectionReferencesId: ID
    data: String
}
input ProjectIrdInput {
    stage: ID
    persent: Int
    date_start: String
    date_end: String
    number: Int
}input ProjectStageInput {
    stage: ID
    persent: Int
    date_start: String
    date_end: String
    number: Int
}input ProjectTasksInput {
    stage: ID
    persent: Int
    date_start: String
    date_end: String
    number: Int
}
input TasksToProject {
    id: ID
    projectId: ID!
    inherited_task_ids: [ID]
    task_id: ID!
    date_start: String
    date_end: String
    duration: String
    price: Float
    executors: [TaskExecutor]
    description: String
}
input TaskExecutor {
    id: ID
    executor_id: ID
    price: Int
}
 input IrdToProject {
     id: ID
     project_id: ID
     ird_id: ID
     stageNumber: Int
     applicationProject: Int
     receivedDate: String
 }

