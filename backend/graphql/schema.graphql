#import auth.graphql
#import file_downloads.graphql
#import projects.graphql
#import result.graphql
#import fenrir.graphql
type Query {
    executorOrders(projectId: ID!, executorId: ID!): [ExecutorOrder!]


    contacts(id: ID, queryOptions: QueryOptions, queryType: String, organizationId: ID): ContactsResult @checkRole(permission:  ["read-contact"])
    organizations(id: ID, queryOptions: QueryOptions, queryType: String, organizationId: ID): OrganizationsResult @checkRole(permission:  ["read-organization"])
    countProjectByOrganizations(organizationId: ID): CountProjectByOrganizationsResult @checkRole(permission:  ["read-organization"])
    positions(id: ID, queryOptions: QueryOptions, queryType: String): PositionsResult
    irds(id: ID, queryOptions: QueryOptions, queryType: String): IrdsResult @checkRole(permission:  ["read-ird"])
    stages(id: ID, queryOptions: QueryOptions, queryType: String): StagesResult @checkRole(permission:  ["read-stage"])
    tasks(id: ID, queryOptions: QueryOptions, queryType: String): TasksResult @checkRole(permission:  ["read-task"])
    projects(id: ID, queryOptions: QueryOptions, queryType: String, projectId: ID, projectStatuses: String): ProjectsResult
    persons(id: ID, queryOptions: QueryOptions, queryType: String): PersonsResult @checkRole(permission:  ["read-project"])
    biks(id: ID, queryOptions: QueryOptions, queryType: String): BikResult
    passportPlaceIssues(id: ID, queryOptions: QueryOptions, queryType: String): PassportPlaceIssueResult
    banks(id: ID, queryOptions: QueryOptions, queryType: String): BanksResult

    projectTasksExecutors(taskId: ID): ProjectTaskExecutorResult @checkRole(permission:  ["read-project-task-executor"])

    permissions(taskId: ID, queryOptions: QueryOptions, queryType: String): PermissionResult @checkRole(permission:  ["dev"])
    users(id: ID, queryOptions: QueryOptions, queryType: String, organizationId: ID): UsersResult @checkRole(permission:  ["dev"])
    roles(id: ID, queryOptions: QueryOptions, queryType: String, organizationId: ID): RolesResult @checkRole(permission:  ["dev"])

    typeProjects(id: ID, queryOptions: QueryOptions, queryType: String): TypeProjectsResult
    typeTechnicalSpecification: TypeTechnicalSpecification
    sectionReferences: SectionReferenceResult
    groupTypeProjects(id: ID): [GroupTypeProjectDocument]

    projectIrds( projectId: ID): [ProjectIRD] @checkRole(permission:  ["read-project-ird"])
    projectStages( projectId: ID): [ProjectStage] @checkRole(permission:  ["read-project-stage"])
    projectTasksQuery(id: ID, queryOptions: QueryOptions ,projectId: ID, queryType: String): [ProjectTask] @checkRole(permission:  ["read-project-task"])
    projectSectionReferences(id: ID, queryOptions: QueryOptions ,projectId: ID, queryType: String): [ProjectSectionReference]
    projectsStatistic: [ProjectStatistic] @checkRole(permission:  ["read-project"])

    formulaByKey(id: ID, queryOptions: QueryOptions ,keys: [String!]): FormulaResult
    references(id: ID, queryOptions: QueryOptions): ReferenceResult
    fenrirs(id: ID, queryOptions: QueryOptions): FenrirsResult
    templateFenrirs(id: ID, queryOptions: QueryOptions): FenrirsResult
    templateFenrirsTypeProject(projectId: ID): FenrirsResult
    projectFenrirs(typeProject: ID): FenrirsResult

    currentUser: AuthPayload!

    legalForms: [LegalForm]!
    facilities: [SelectionFacility!]!
    TypePayments: [TypePayment]
    projectStatuses: [ProjectStatus!]!
}
directive @checkRole(permission: [String!]) on FIELD_DEFINITION | FIELD
extend type Mutation {
    register(input: RegisterInput!): AuthPayload!
    login(input:  LoginInput!): AuthPayload!
}

input QueryOptions {
    id: Int
    page: Int
    limit: Int
    search: String
    searchColumns: String
    find: String
    findColumns: String
    sortField: String
    sortOrder: String
}input RegisterInput {
    name: String!
    email: String!
    password: String!
}input LoginInput {
    email: String
    password: String
}

type Attachment {
    name: String
    path: String
}type   ExecutorOrder {
    id: ID!
    created_at: String
    updated_at: String
    date_generate: String!
    date_order: String!
    date_attachment: String
    file_id: ID
    project_tasks: [ProjectTask]
 }

type Email {
    subject: String
    date: String
    body: String
    attachments: [Attachment]
}type AuthPayload {
    user: User
    roles: [Role]
    permissions: [Permission]
    access_token: String
}
type Mutation {
    sendSMS(
        id: String
    ): String
    updateTask(
        name: String
    ): Task @checkRole(permission:  ["update_task"])
    createTask(
        name: String
    ): Task @checkRole(permission:  ["create_task"])

    createTypeTechnicalSpecification(
        name: String
    ): TypeTechnicalSpecification @checkRole(permission:  ["create-typeTechnicalSpecification"])
    updateTypeTechnicalSpecification(
        id: ID
        name: String
        techicalSpecification: ID
    ): TypeTechnicalSpecification @checkRole(permission:  ["update-typeTechnicalSpecification"])

    createGroupTypeProject(
        name: String
        techicalSpecification: ID
    ): GroupTypeProjectDocument @checkRole(permission:  ["create-typeProject-group"])
    updateGroupTypeProject(
        id: ID
        name: String
    ): GroupTypeProjectDocument @checkRole(permission:  ["update-typeProject-group"])

    createTypeProject(
        name: String!
        group_id: ID!
        code: String!
    ): TypeProjectDocument @checkRole(permission:  ["create-typeProject"])
    updateTypeProject(
        id: ID!
        name: String!
        group_id: ID!
        code: String!
    ): TypeProjectDocument @checkRole(permission:  ["update-typeProject"])
    deleteTypeProject (
        id: ID
    ): String @checkRole(permission:  ["delete-typeProject"])

    createIrd(
        name: String
    ): IRD! @checkRole(permission:  ["create-ird"])
    updateIrd(
        id: ID!
        name: String!
    ): IRD! @checkRole(permission:  ["update-ird"])
    deleteIrd (
        id: ID!
    ): String @checkRole(permission:  ["delete-ird"])

    createStage(
        name: String!
    ): Stage! @checkRole(permission:  ["create-stage"])
    updateStage(
        id: ID!
        name: String!
    ): Stage! @checkRole(permission:  ["update-stage"])
    deleteStage (
        id: ID!
    ): String @checkRole(permission:  ["delete-stage"])

    createPpi(
        name: String!
        code: String!
    ): PassportPlaceIssue!
    updatePpi(
        id: ID!
        name: String!
        code: String!
    ): PassportPlaceIssue!

    createBik(
        BIK: String!
        name: String!
        correspondent_account: String
    ):  bik!
    updateBik(
        id: ID!
        BIK: String!
        name: String!
        correspondent_account: String
    ):  bik!

    createContact(
        first_name: String!
        last_name: String
        patronymic: String
        birth_day: String
        work_phone: String
        mobile_phone: String
        work_email: String
        email: String
        position_id: ID
        organization_id: ID
    ): Contact! @checkRole(permission:  ["create-contact"])
    updateContact(
        id: ID!
        first_name: String!
        last_name: String
        patronymic: String
        birth_day: String
        work_phone: String
        work_email: String
        mobile_phone: String
        email: String
        position_id: ID
        organization_id: ID
    ): Contact! @checkRole(permission:  ["update-contact"])
    deleteContact (
        id: ID!
    ): Boolean @checkRole(permission:  ["delete-contact"])


    createOrganization(
        legal_form_id: ID!
        name: String!
        full_name: String!
        address_legal: String
        office_number_legal: String
        address_mail: String
        office_number_mail: String
        phone_number: String
        fax_number: String
        email: String
        INN: String
        OGRN: String
        OKPO: String
        KPP: String
        bik_id: ID
        payment_account: String
        director_id: ID
    ): Organization! @checkRole(permission:  ["create-organization"])
    updateOrganization(
        id: ID!
        legal_form_id: ID!
        name: String!
        full_name: String
        address_legal: String
        office_number_legal: String
        address_mail: String
        office_number_mail: String
        phone_number: String
        fax_number: String
        email: String
        INN: String
        OGRN: String
        OKPO: String
        KPP: String
        bik_id: ID
        payment_account: String
        director_id: ID
    ): Organization! @checkRole(permission:  ["update-organization"])
    deleteOrganization (
        id: ID!
    ): Organization @checkRole(permission:  ["delete-organization"])

    createPerson(
        firstname: String
        lastname: String
        patronymic: String
        serial: String
        number: String
        passport_place_issue_id: ID
        address_registration: String
        address_residential: String
        birth_date: String
        date: String
        SHILS: String
        INN: String
        payment_account: String
        phone_number: String
        email: String
        email_sibnipi: String
        bank_id: ID
        bik_id: ID
    ): Person! @checkRole(permission:  ["create-person"])
    updatePerson(
        id: ID!
        firstname: String
        lastname: String
        patronymic: String
        serial: String
        number: String
        passport_place_issue_id: ID
        address_registration: String
        address_residential: String
        birth_date: String
        date: String
        SHILS: String
        INN: String
        payment_account: String
        phone_number: String
        email: String
        email_sibnipi: String
        bank_id: ID
        bik_id: ID
    ): Person! @checkRole(permission:  ["update-person"])
    deletePerson (
        id: ID!
    ): Person @checkRole(permission:  ["delete-person"])


}
type Contact {
    id: ID!
    first_name: String!
    last_name: String
    patronymic: String
    birth_day: String
    work_phone: String
    work_email: String
    mobile_phone: String
    email: String
    position: Position
    organization: Organization
}
type ProjectStatus{
    name: String!
    name_key: String!
}
type PositionName {
    id: ID!
    name: String!
}
type CurrentUser {
    user: User!
    access_token: String!
}
type TypePayment {
    id: ID!
    name: String!
}
type projectPayment {
    id: ID!
    date_time_payment: String
    project: Project
    type_payment: TypePayment
    price: Int
}
type User {
    id: ID
    name: String
    email: String
    roles: [Role]
    person: Person
    organization: Organization
}
type Role {
    permissions: [Permission]
    description: String
    name: String
    name_key: String
}type Permission {
    name_key: String
    name: String
    description: String
}
type Content {
    id: ID!
    name: String!
}
type Position {
    id: ID!
    name: String!
}type ProjectTaskExecutor {
    id: ID!
    executor: Person
    project_task: ProjectTask!
    price: Float
    date_start: String
    date_end: String
}
type Organization{
    id: ID!
    legal_form: LegalForm!
    name: String!
    full_name: String
    address_legal: String
    office_number_legal: String
    address_mail: String
    office_number_mail: String
    phone_number: String
    fax_number: String
    email: String
    INN: String
    OGRN: String
    OKPO: String
    KPP: String
    bik:  bik
    payment_account: String
    director: Contact
    employees: [Contact]

}type CountProjectByOrganizations{
    organization_id: ID!
    count_project: Int!
}
type LegalForm{
    id: ID!
    name: String!
}
type  bik{
    id: ID!
    BIK: String
    name: String
    correspondent_account: String
}
type Person{
    id: ID!
    passport: Passport!
    SHILS: String
    INN: String
    payment_account: String
    phone_number: String
    email: String
    email_sibnipi: String
    bank: Bank
    bik:  bik
}
type Passport{
    id: ID!
    firstname: String
    lastname: String
    patronymic: String
    serial: String
    number: String
    address_residential: String
    address_registration: String
    passport_place_issue: PassportPlaceIssue
    birth_date: String
    date: String
}
type PassportPlaceIssue{
    id: ID!
    name: String!
    code: String!
}
type Bank{
    id: ID!
    name: String!
}
type Facility{
    id: ID!
    name: String!
    code: Int
    type_facility: TypeFacility
    group_facility: GroupFacility
}
type TypeFacility{
    id: ID!
    name: String!
}
type GroupFacility{
    id: ID!
    name: String!
    code: Int
    facilities: [Facility]
    subselection_facility: SubselectionFacility
}
type SubselectionFacility{
    id: ID!
    name: String!
    code: Int
    group_facility: [GroupFacility]
    selection_facility: SelectionFacility
}
type SelectionFacility{
    id: ID!
    name: String!
    code: Int
    subselection_facility: [SubselectionFacility]
}
type ProjectSectionReference{
    id: ID!
    project: Project
    section_reference: SectionReference
    values: String
}type ProjectStatistic{
    status: ProjectStatus
    project_ids: [ID]
}
type TypeProjectDocument{
    id: ID!
    name: String!
    code: String!
    group: GroupTypeProjectDocument
    template_project_id: ID
}
type IRD{
    id: ID!
    name: String!
}
type GroupTypeProjectDocument{
    id: ID
    name: String
    code: String
    technical_specification: TypeTechnicalSpecification
}
type TypeTechnicalSpecification{
    id: ID!
    name: String!
}
type SectionReference{
    id: ID!
    name: String!
    description: String!
    values: String!
}
type Stage{
    id: ID!
    name: String
    task_id: Int
}
type Task{
    id: ID!
    name: String
}



