type Query {
    contacts: [Contact!]!
    positions: [Position!]!
    currentUser: User!
}

type Mutation {
    addContact(
        first_name: String!
        last_name: String!
        mobile_phone: String!
        email: String!
        sibnipi_email: String!
        position_id: ID!
    ): Contact!

    updateContact(
        id: ID!
        first_name: String!
        last_name: String!
        mobile_phone: String!
        email: String!
        sibnipi_email: String!
        position_id: ID!
    ): Contact!
}

type Contact {
    id: ID!
    first_name: String!
    last_name: String!
    mobile_phone: String!
    email: String!
    sibnipi_email: String!
    position: Position!
}

type CurrentUser {
    user: User!
    access_token: String!
}

type User {
    id: ID!
    name: String!
    email: String!
    role: Role!
}

type Role {
    id: ID!
    name: String!
}

type Position {
    id: ID!
    name: String!
}

input RegisterInput {
    name: String!
    email: String!
    password: String!
}

input LoginInput {
    email: String!
    password: String!
}

type AuthPayload {
    user: User!
    access_token: String!
}

extend type Mutation {
    register(input: RegisterInput!): AuthPayload!
    login(input:  LoginInput!): AuthPayload!
}
