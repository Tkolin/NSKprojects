#
#   QUERY
#
extend type Query {
    formulaByKey(id: ID, queryOptions: QueryOptions ,keys: [String!]): FormulaResult
    fenrirs(id: ID, queryOptions: QueryOptions): FenrirsResult
    templateFenrirs(id: ID, queryOptions: QueryOptions): FenrirsResult
    templateFenrirsTypeProject(projectId: ID): FenrirsResult
    projectFenrirs(typeProject: ID): FenrirsResult

}
# INPUTS:

# TYPES:


#
#   MUTATIONS
#
extend type Mutation {
    createFormula(data: FormulaInput): Int @checkRole(permission:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])
    updateFormula(data: FormulaInput): Int @checkRole(permission:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])
    createReference(data: ReferenceInput): Int @checkRole(permission:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])
    computeFormulas(formulas: [String]): [String] @checkRole(permission:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])
    createFenrir(data: FenrirInput): Int  @checkRole(permission:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])
    createFenrirTemplate(data: FenrirInput): Int @checkRole(permission:  ["ADMIN", "GEN_DIR","TECH_DIR","EMPLOYEE","OFF_WORKER","BOOKMAKER","LAWYAR","FIN_DIR","PROGRAMMER"])

}
# INPUTS:
input FenrirInput{
    name: String
    description: String
    models: String
}
input FormulaInput{
    id: ID
    original_formula: String
    rpn_formula: String
    name: String!
    description: String!
    variable_data: [VariableInput]
}
input ReferenceInput{
    id: ID
    name: String
    description: String
    values: String!
}
input VariableInput{
    id: ID
    name: String
    name_key: String!
    description: String
}
#-RESULTS:
